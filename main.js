// import { initializeApp } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-app.js";
// import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-auth.js";
// import { getFirestore, doc, setDoc, collection, addDoc, getDocs } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-firestore.js";

// const firebaseConfig = {
//   apiKey: "AIzaSyCtp4izpF1GCH2qWpeLtZOdk33A_iNKzqg",
//   authDomain: "nknl-d7b54.firebaseapp.com",
//   projectId: "nknl-d7b54",
//   storageBucket: "nknl-d7b54.firebasestorage.app",
//   messagingSenderId: "792185587281",
//   appId: "1:792185587281:web:585e98f2f87d7d59031a70",
//   measurementId: "G-TC7XHSSCBX"
// };

// const app = initializeApp(firebaseConfig);
// const auth = getAuth(app);
// const db = getFirestore(app);
import { initializeApp } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-app.js";
import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-auth.js";
import { getFirestore, doc, setDoc, collection, addDoc, getDocs } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-firestore.js";

const firebaseConfig = {
  apiKey: "AIzaSyCtp4izpF1GCH2qWpeLtZOdk33A_iNKzqg",
  authDomain: "nknl-d7b54.firebaseapp.com",
  projectId: "nknl-d7b54",
  storageBucket: "nknl-d7b54.firebasestorage.app",
  messagingSenderId: "792185587281",
  appId: "1:792185587281:web:585e98f2f87d7d59031a70",
  measurementId: "G-TC7XHSSCBX"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// ===== BI·∫æN TO√ÄN C·ª§C =====
let progressChartInstance = null;

// (ph·∫ßn code ƒëƒÉng k√Ω, ƒëƒÉng nh·∫≠p, form, loadJournal... gi·ªØ nguy√™n)

// ===== ƒêƒÇNG K√ù =====
const signupBtn = document.getElementById("signup-btn");
if (signupBtn) {
  signupBtn.addEventListener("click", async () => {
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const uid = userCredential.user.uid;
      await setDoc(doc(db, "users", uid), { email });
      document.getElementById("auth-message").innerText = "ƒêƒÉng k√Ω th√†nh c√¥ng!";
    } catch (error) {
      document.getElementById("auth-message").innerText = error.message;
    }
  });
}

// ===== ƒêƒÇNG NH·∫¨P =====
const loginBtn = document.getElementById("login-btn");
if (loginBtn) {
  loginBtn.addEventListener("click", async () => {
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;
    try {
      await signInWithEmailAndPassword(auth, email, password);
      window.location.href = "journal.html";
    } catch (error) {
      document.getElementById("auth-message").innerText = error.message;
    }
  });
}

// ===== KI·ªÇM TRA TR·∫†NG TH√ÅI NG∆Ø·ªúI D√ôNG =====
onAuthStateChanged(auth, (user) => {
  if (document.getElementById("journal-form")) {
    if (!user) window.location.href = "login.html";
    else loadJournal(user.uid);
  }
});

// ===== ƒêƒÇNG XU·∫§T =====
const logoutBtn = document.getElementById("logout-btn");
if (logoutBtn) {
  logoutBtn.addEventListener("click", () => signOut(auth));
}

// ===== L∆ØU NH·∫¨T K√ù =====
// ===== L∆ØU NH·∫¨T K√ù =====
async function saveJournal(uid, data) {
  try {
    // L∆∞u ƒë√∫ng ƒë∆∞·ªùng d·∫´n kh·ªõp v·ªõi Firestore rules
    const journalRef = collection(db, "users", uid, "journalEntries");
    await addDoc(journalRef, {
      ...data,
      createdAt: new Date().toISOString()
    });
    console.log("‚úÖ Nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c l∆∞u!");
  } catch (error) {
    console.error("‚ùå L·ªói khi l∆∞u nh·∫≠t k√Ω:", error);
    alert("Kh√¥ng th·ªÉ l∆∞u nh·∫≠t k√Ω: " + error.message);
  }
}

// ===== X·ª¨ L√ù FORM =====
const journalForm = document.getElementById("journal-form");
if (journalForm) {
  journalForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const user = auth.currentUser;
    if (!user) return alert("Vui l√≤ng ƒëƒÉng nh·∫≠p!");
    const data = {
      date: document.getElementById("date").value,
      goal: document.getElementById("goal").value,
      activities: document.getElementById("activities").value,
      rating: parseInt(document.getElementById("rating").value),
    };
    await saveJournal(user.uid, data);
    alert("L∆∞u th√†nh c√¥ng!");
    journalForm.reset();
    loadJournal(user.uid);
  });
}

// ===== HI·ªÇN TH·ªä NH·∫¨T K√ù & V·∫º BI·ªÇU ƒê·ªí =====
async function loadJournal(uid) {
  const q = collection(db, "users", uid, "journalEntries");
  const querySnapshot = await getDocs(q);
  const logs = [];
  querySnapshot.forEach((doc) => logs.push(doc.data()));

  // Hi·ªÉn th·ªã danh s√°ch nh·∫≠t k√Ω
  const list = document.getElementById("journal-list");
  list.innerHTML = "";
  logs.forEach((log) => {
    const li = document.createElement("li");
    li.textContent = `${log.date} - ${log.goal} (${log.rating}/10)`;
    list.appendChild(li);
  });

  // V·∫Ω bi·ªÉu ƒë·ªì ti·∫øn b·ªô
  const ctx = document.getElementById("progressChart");

  // N·∫øu ƒë√£ c√≥ bi·ªÉu ƒë·ªì c≈© th√¨ h·ªßy tr∆∞·ªõc khi t·∫°o m·ªõi
  if (progressChartInstance) {
    progressChartInstance.destroy();
  }

  progressChartInstance = new Chart(ctx, {
    type: "line",
    data: {
      labels: logs.map(l => l.date),
      datasets: [{
        label: "ƒêi·ªÉm nƒÉng l·ª±c",
        data: logs.map(l => l.rating),
        borderColor: "#4f46e5",
        tension: 0.3,
        fill: false,
        pointRadius: 5,
        pointBackgroundColor: "#6366f1"
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          max: 10
        }
      },
      plugins: {
        legend: { display: true },
        tooltip: { mode: 'index' }
      }
    }
  });
}

// =======================
// THEME SWITCHER
// =======================
const q = (sel) => document.querySelector(sel);

document.addEventListener("DOMContentLoaded", () => {
  const themeToggle = q("#theme-toggle");
  const applyTheme = (theme) => {
    if (theme === "light") {
      document.documentElement.setAttribute("data-theme", "light");
    } else {
      document.documentElement.removeAttribute("data-theme");
    }
  };

  let currentTheme = localStorage.getItem("theme") || "dark";
  applyTheme(currentTheme);

  if (themeToggle) {
    themeToggle.textContent = currentTheme === "light" ? "üåû" : "üåô";

    themeToggle.addEventListener("click", () => {
      currentTheme = currentTheme === "light" ? "dark" : "light";
      applyTheme(currentTheme);
      localStorage.setItem("theme", currentTheme);
      themeToggle.textContent = currentTheme === "light" ? "üåû" : "üåô";
    });
  }
});
// üåü Navbar toggle for mobile
// Hamburger toggle
const navToggle = document.getElementById("nav-toggle");
const navMenu = document.getElementById("nav-menu");

if (navToggle && navMenu) {
  navToggle.addEventListener("click", () => {
    navMenu.classList.toggle("mobile-open");
  });
}

// ·∫®n menu khi click b√™n ngo√†i (tu·ª≥ ch·ªçn)
document.addEventListener("click", (e) => {
  if (!navMenu.contains(e.target) && !navToggle.contains(e.target)) {
    navMenu.classList.remove("mobile-open");
  }
});

// ====== GEMINI AI PH√ÇN T√çCH BI·ªÇU ƒê·ªí ======
const GEMINI_API_KEY = "AIzaSyA3UsKatbkPLqBFicqHzLClyGC_6hG15mc"; // üëâ D√°n API key t·∫°i ƒë√¢y

const analyzeBtn = document.getElementById("analyze-btn");
const aiBox = document.getElementById("ai-analysis");

if (analyzeBtn) {
  analyzeBtn.addEventListener("click", async () => {
    aiBox.innerHTML = "ü§ñ ƒêang g·ª≠i d·ªØ li·ªáu cho Gemini...";

    const journalList = document.getElementById("journal-list");
    const items = Array.from(journalList.querySelectorAll("li"));
    if (items.length === 0) {
      aiBox.innerHTML = "‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch!";
      return;
    }

    const summary = items.map(li => li.textContent).join("\n");

    try {
      const res = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  {
                    text:
                      "D∆∞·ªõi ƒë√¢y l√† c√°c nh·∫≠t k√Ω nƒÉng l·ª±c:\n" +
                      summary +
                      "\n\n‚Üí H√£y ph√¢n t√≠ch xu h∆∞·ªõng ƒëi·ªÉm s·ªë, ƒë√°nh gi√° ti·∫øn b·ªô v√† g·ª£i √Ω ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát."
                  }
                ]
              }
            ]
          })
        }
      );

      const data = await res.json();

      const output =
        data?.candidates?.[0]?.content?.parts?.[0]?.text ||
        "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.";

      aiBox.innerHTML = `
        <div style="background:#f9fafb;padding:10px;border-radius:8px;">
          <strong>üß† Ph√¢n t√≠ch t·ª´ Gemini:</strong><br>
          ${output.replace(/\n/g, "<br>")}
        </div>`;
    } catch (err) {
      console.error("AI fetch error:", err);
      aiBox.innerHTML = `‚ùå L·ªói: ${err.message}`;
    }
  });
}










